GettextTranslator
****************

Gettext Translator is tool that enables simple and user friendly (gettext) translation of your texts via panel in debug bar.

|* Version | 2.0.2
|* Forum thread | "english":http://forum.nette.org/en/1132-new-version-of-gettexttranslator-2-0-1, "česky":http://forum.nette.org/cs/4758-nettetranslator-gettexttranslator-nette-translation-panel
|* Authors |	Josef Kufner (jk@frozen-doe.net)
|* ^|		Miroslav Paulík (https://github.com/castamir)
|* ^|		Roman Sklenář (http://romansklenar.cz)
|* ^|		Miroslav Smetana
|* ^|		Jan Smitka
|* ^|		Patrik Votoček (patrik@votocek.cz)
|* ^|		Tomáš Votruba (tomas.vot@gmail.com)
|* ^|		Václav Vrbka (gmvasek@php-info.cz)
|* License | New BSD License

Installation
===

Via [Composer | doc:composer]

/-- code js
{
	"require":{
		"schmutzka/gettexttranslator": ">= 2.0.2"
	}
}
\--

or from "github":https://github.com/Schmutzka/GettextTranslator/ to your `libs` folder

config.neon
---
- set default language
- add language file for specific modules

/---neon
common:
	gettextTranslator:
		lang: cs
		files:
			front: %appDir%/lang # for module Front and other non-specified modules
			admin: %appDir%/lang-admin # for module Admin
		# optional with defaults
		layout: horizontal # or: vertical
		height: 450
\---

Bootstrap.php
---

Place before `$container = $configurator->createContainer()`;

/---php
$configurator->onCompile[] = function ($configurator, $compiler) {
	$compiler->addExtension('gettextTranslator', new GettextTranslator\DI\Extension);
};
\---

Or you can use *extensions* part in *config.neon* since **Nette 2.1-dev** instead.

**config.neon**
/---neon
extensions:
	gettextTranslator: GettextTranslator\DI\Extension
\---


How to change language
===

BasePresenter.php
---

/--php

class BasePresenter extends Nette\Application\UI\Presenter
{
	/** @persistent */
	public $lang;

	/** @var GettextTranslator\Gettext */
	protected $translator;


	/**
	 * @param GettextTranslator\Gettext
	 */
	public function injectTranslator(GettextTranslator\Gettext $translator)
	{
		$this->translator = $translator;
	}


	public function createTemplate($class = NULL)
	{
		$template = parent::createTemplate($class);

		// if not set, the default language will be used
		if (!isset($this->lang)) {
			$this->lang = $this->translator->getLang();
		} else {
			$this->translator->setLang($this->lang);
		}

		$template->setTranslator($this->translator);

		return $template;
	}
}
\---


@layout.latte
---

Now we add links that enabled language change into template.

/--html
Choose language:
<a n:href="this, lang => en">English</a>
<a n:href="this, lang => cs">Česky</a>
\--

We get following urls:
/--html
site.com/?lang=en
site.com/?lang=cs
\--

If we setup lang default value in `BasePresenter.php`, its value will not be displayed in the url, e.g. for `$lang = en` urls will look like this:

/--html
site.com/
site.com/?lang=cs
\--

Nice routes
---

Next step might be nicer lang "routing":http://doc.nette.org/en/routing#toc-optional-sequences.

/--html
site.com/en/
site.com/cs/
\--


Use cases
===
In config
---

Passing Translator to other services via autorwiring or:

/---neon
services:
	mailService: MailService(@gettextTranslator.translator)
\---

In templates
---

Plural version is set as default for Czech forms (1 piece, 2-4 pieces, 5+/0 pieces), so you don't have to manipulate .po/.mo files.


/--html
{_"Login"}

{_"piece", $number}
1 piece <!-- $number = 1; -->
2 pieces <!-- $number = 2; -->
5 pieces <!-- $number = 5; -->
\--

In forms
---

/--php
protected function createComponentMyForm()
{
	$form = new Form;
	$form->setTranslator($this->translator);

	// ...

	return $form;
}
\--


In components
---

Extend `createTemplate()` method in your BaseControl, as in Presenter.

/--php
public function createTemplate($class = NULL)
{
	$template = parent::createTemplate($class);
	$template->setTranslator($this->parent->translator); // $translator in presenter has to be public
	// or $this->translator via construct/inject

	return $template;
}
\--


Placeholder
---
Placeholder is not directly supported, so we have to use this workaround in template.

/---html
{input text, placeholder => $template->translate("Text to be translated")}
\---


FlashMessage
---

/--php
// BasePresenter

public function flashMessage($message, $type = "info")
{
	$message = $this->translator->translate($message);
	return parent::flashMessage($message, $type);
}
\--


{{extras}}

{{author: Schmutzka|3194}}
