cURL wrapper
************

.[perex]
Pokročilý cURL wrapper usnadňují práci s "cURL":http://cz.php.net/curl


| Github | "Kdyby/Curl":https://github.com/Kdyby/Curl
| Composer balíček | "kdyby/curl":http://packagist.org/packages/kdyby/curl
| Fórum | "Curl Wrapper":http://forum.nette.org/cs/3054-curl-wrapper
| Autor | Filip Procházka
| Licence | BSD nebo GPL



Instalace
=========

Preferovaný způsob instalace je pomocí [Composeru | doc:composer]

/-- code js
{
    "require":{
        "kdyby/curl": "@dev"
    }
}
\--



Příklady použití
===============


Základní metody
----------------

Inicializaci a jednoduchou žádost lze provést více způsoby, pokaždé však třída vrací objekt `Kdyby\Curl\Response` nebo v případě chyby vyhodí vyjímku `Kdyby\Curl\CurlException`.

GET

/--php
$request = new Kdyby\Curl\Request("http://curl.kdyby.org/prevodnik.asm.zdrojak");
try {
	$response = $request->get();

	echo $response->getBody();
	var_dump($response->getHeaders()); // vrací pole hlaviček

} catch (Kdyby\Curl\CurlException $e ){
	echo $e->getMessage();
}
\--

POST

/-- php
$request = new Kdyby\Curl\Request("http://curl.kdyby.org/dump_post.php");

try {
	$response =  $request->post(array(
		'var1' => 'Lorem ipsum dot sit amet',
		'var2' => 0,
		'var3' => 23,
		'var4' => True,
		'var5' => False,
	));

	echo $response->getBody();
	var_dump($response->getHeaders()); // vrací pole hlaviček

} catch (Kdyby\Curl\CurlException $e ){
	echo $e->getMessage();
}
\--


Typy HTTP požadavků
-------------------

Třída obsahuje zkratky na základních 5 typů HTTP metod.

/-- php
$request = new Kdyby\Curl\Request;

$url = "http://curl.kdyby.org/";
$one = $request->get($url, array(
	'var1' => 'value1',
	'var2' => 'value2'
)); # pošle žádost na http://curl.kdyby.org/?var1=value1&var2=value2

$two = $request->post($url, $post);
$three = $request->head($url, $query);
$four = $request->put($url, $query);
$five = $request->delete($url, $query);
\--


Není ovšem problém poslat požadavek vlastní metodou

/-- php
$request->method = 'MY_WEIRD_METHOD';
$odpoved = $request->send();
\--


Proxy
-----

Wrapper podporuje i proxy, čili je možné přidat libovolný počet proxy serverů a wrapper je zkouší tak dlouho dokud žádost přes jednu neprojde v pořádku v nastaveném timeoutu

/-- php
$sender = new Kdyby\Curl\CurlSender;
$sender->addProxy('192.168.1.160', 3128 [, $username = Null [, $password = Null [, $timeout = 15]]]);
$response = $sender->send($request);
\--


Vlastní hlavičky
----------------

/-- php
$request->header['Host'] = '12.345.678.90';
$request->header['Some-Custom-Header'] = 'Some Custom Value';
\--

{{tags: curl}}


{{author: Filip Procházka|2118}}
