Replikátor formulářových kontejnerů `$form->addDynamic()`
*********************************************************

.[perex]
Jednoduchý formulářový kontejner, který umožňuje zpracování dynamického počtu elementů.

| Github | "Kdyby/ReplicatorExtension":https://github.com/Kdyby/ReplicatorExtension
| API dokumentace | "Kdyby\Extension\Forms\Replicator":http://apigen.juzna.cz/doc/Kdyby/Framework/namespace-Kdyby.Extension.Forms.Replicator.html
| Composer balíček | "kdyby/forms-replicator":http://packagist.org/packages/kdyby/forms-replicator
| Sandbox | "hosiplan/nette-adddynamic":https://github.com/hosiplan/nette-adddynamic
| Autor | Filip Procházka
| Licence | BSD nebo GPL



Instalace
=========

Preferovaný způsob instalace je pomocí [Composeru | doc:composer]

/-- code js
{
    "require":{
        "kdyby/forms-replicator": "@dev"
    }
}
\--

Do `app/boostrap.php`, nebo do `BasePresenter::startup()` zkopírujte následující řádek

/---code php
Kdyby\Extension\Forms\Replicator\Replicator::register();
\---


Připojení do formuláře
======================

Jde používat na jednoduché věci, jako je třeba seznam datumů

/---code php
use Nette\Forms\Container;

$form->addDynamic('dates', function (Container $container) {
        $container->addDate('date');
});
\---

Nebo na složité kombinace, třeba uživatelů a jejich adres

/---code php
$form->addDynamic('users', function (Container $user) {
        $user->addText('name', 'Jméno');
        $user->addText('surname', 'Příjmení');
        $user->addDynamic('addresses', function (Container $address) {
                $address->addText('street', 'Ulice');
                $address->addText('city', 'Město');
                $address->addText('zip', 'PSČ');
                // ...
        }, 1);
        // ...
}, 2);
\---


Zpracování
==========

Zpracování je triviální, stačí projít hodnoty od uživatele, třeba v cyklu.

/---code php
use Nette\Application\UI\Form;

public function FormSubmitted(Form $form)
{
	foreach ($form['users']->values as $user) { // hodnoty formulářového prvku
		dump($user['name'] . ' ' . $user['surname']);

		foreach ($user['addresses'] as $address) { // pracujeme s polem hodnot
			dump($address['city']);
		}
	}
}
\---

.[warning]
Replicator se krajně nehodí na zpracovávání uploadů. Pokud nemáte detailní znalosti fungování formulářů a vyloženě nepotřebujete funkčnost Replicatoru, zvažte raději použití nějaké "Multiple File Upload" komponenty.


Editace záznamů
===============

Vhodné je používat klíče jednotlivých vnořených kontejnerů jako identifikátory. Z povahy formulářových kontejnerů je pak možný třeba i tento zápis

/---code php
public function actionEditUsers()
{
	$form = $this['myForm'];
	if (!$form->isSubmitted()) { # pokud nebyl formulář odeslán
		# předpokládá model ve vlastnosti $model presenteru
		$users = $this->model->findAll();
		foreach ($users as $user) {
			$form['users'][$user->id]->setValues($user);
			# naplní kontejner výchozími hodnotami
		}

		# pokud máte hodnoty správně strukturovány, můžete i takto
		$form['users']->setValues($users);
	}
}
\---

A upravím zpracování

/---code php
public function FormSubmitted(Form $form)
{
	foreach ($form['users']->values as $userId => $user) {
	# nyní mám přístupné ID uživatele i hodnoty z formuláře
	// ...
\---


Přidávání a odebírání kontejnerů
================================

V sandboxu je příklad, kde je na řádku kontejneru tlačítko smazat a pod všemi kontejnery je tlačítko přidat.

/---code php
protected function createComponentMyForm()
{
	$form = new Nette\Application\UI\Form;

	// jméno, továrnička, výchozí počet
	$users = $form->addDynamic('users', function (Container $user) {
		// ...
		$user->addSubmit('remove', 'Smazat')
			->addRemoveOnClick(); // metodu vytváří replicator
	}, 1);

	$users->addSubmit('add', 'Přidat dalšího člověka')
		->addCreateOnClick(); // metodu vytváří replicator

	// ...
\---

addRemoveOnClick()
-------

Metoda je registrována na [SubmitButton |api:Nette\Forms\Controls\SubmitButton ] pomocí [rozšiřující metody |doc:php-language-enhancements#toc-rozsirujici-metody]. Přijímá jeden volitelný argument, jímž je libovolný `callback`. Před smazáním prvku mu předá objekt `Replicator` a prvek, který plánuje smazat.

/--php
// use Kdyby\Extension\Forms\Replicator\Replicator;
// use Nette\Forms\Container;

$user->addSubmit('remove', 'Smazat')
	->addRemoveOnClick(function (Replicator $replicator, Container $user) {
		$replicator->form->presenter->flashMessage("Uživatel " . $user->name . " smazán.");
	});
\--

Pokud bych chtěl například smazat uživatele i z databáze a mám klíče prvků jako identifikátory, pak získám hodnotu takto:

/---code php
$user->addSubmit('remove', 'Smazat')
	->addRemoveOnClick(callback($presenter, 'MyFormRemoveElementClicked'));

// ...

public function MyFormRemoveElementClicked(Replicator $replicator, Container $user)
{
	$id = $user->name; // name je jméno prvku ve stromu komponent
}
\---


addCreateOnClick()
-------

Metoda je registrována na [SubmitButton |api:Nette\Forms\Controls\SubmitButton ] pomocí [rozšiřující metody |doc:php-language-enhancements#toc-rozsirujici-metody]. Přijímá dva volitelné argumenty.

/--php
// use Kdyby\Extension\Forms\Replicator\Replicator;
// use Nette\Forms\Container;

$user->addSubmit('remove', 'Smazat')
	->addCreateOnClick(function (Replicator $replicator, Container $user) {
		// $user je nově vytvořený Container
	});
\--

Pokud chcete, aby šly `Container`y "naklikat" dopředu, bez nutnosti všechny vyplňovat, stačí přidat jako první argument `TRUE`. Tento příklad se hodí, pokud je uživatel zvyklý si políčka "naklikat" a pak je vyplnit najednou a odeslat.

/--php
$user->addSubmit('remove', 'Smazat')
	->addCreateOnClick(TRUE, function (Replicator $replicator, Container $user) { .... });
\--


Vlastní vykreslování
====================

Protože je možné, že do replikátoru přidáte i tlačítko, existuje zde metoda `getContainers()`, která nám vrátí pouze [kontejnery | doc:/cs/forms#toc-addcontainer].

/---code html
{form myForm}
{foreach $form['users']->containers as $user}

	{$user['name']->control} {$user['name']->label}

{/foreach}
{/form}
\---

Nebo s použitím formulářových maker

/---code html
{form myForm}
{foreach $form['users']->containers as $id => $user}

	{input users-$id-name} {label users-$id-name /}

{/foreach}
{/form}
\---

{{author: Filip Procházka|2118}}
