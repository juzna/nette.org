[* webloader-logo.png .(WebLoader) *]
**********

Komponenta načítající skripty a styly s podporou spojování souborů, widgetovým voláním, externí minimalizací obsahu souborů, na straně serveru nastavenými proměnnými v CSS a JavaScriptu, … .[perex]

| Github (zdrojové kódy a download) | http://github.com/janmarek/WebLoader
| Fórum | http://forum.nette.org/cs/2578-page-extras-webloader-extras-webloader
| Autor | Jan Marek
| Licence | MIT
| Verze | 2.0

Instalace
=========

Zkopírujte obsah složky `WebLoader` do své aplikace.

Příklad použití
===============

CSS
---

Továrnička komponenty v presenteru:

/--code php

public function createComponentCss()
{
	// připravíme seznam souborů
	// FileCollection v konstruktoru může dostat výchozí adresář, pak není potřeba psát absolutní cesty
	$files = new \WebLoader\FileCollection(WWW_DIR . '/css');
	$files->addFiles(array(
		'style.css',
		WWW_DIR . '/colorbox/colorbox.css'
	));

	// kompilátoru seznam předáme a určíme adresář, kam má kompilovat
	$compiler = \WebLoader\Compiler::createCssCompiler($files, WWW_DIR . '/webtemp');

	// nette komponenta pro výpis <link>ů přijímá kompilátor a cestu k adresáři na webu
	return new \WebLoader\Nette\CssLoader($compiler, $this->template->basePath . '/webtemp');
}
\--

Použití v šabloně:
/--code html
{control css}
{* nebo pro vygenerování jiných souborů *}
{control css 'base.css', 'layout.css', 'subfolder/text.css'}
\--

JavaScript
----------

Továrnička komponenty v presenteru:

/--code php
public function createComponentJs()
{
	$files = new \WebLoader\FileCollection(WWW_DIR . '/js');
	// můžeme načíst i externí js
	$files->addRemoteFile('http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js');
	$files->addFiles(array('netteForms.js', 'colorbox.js', 'web.js'));

	$compiler = \WebLoader\Compiler::createJsCompiler($files, WWW_DIR . '/webtemp');

	return new \WebLoader\Nette\JavaScriptLoader($compiler, $this->template->basePath . '/webtemp');
}
\--

Použití v šabloně:
/--code html
{control js}
\--

Jiné chování při production a development módu
------------------------------------------

/--code php
// při development módu vypne spojování souborů
$dev = $presenter->context->parameters['developmentMode'];
$compiler->setJoinFiles($dev);

if ($dev) {
	$compiler->addFilter(callback('packJs'));
}
\--

Filtry
======

Podobu vygenerovaného kódu lze ovlivnit použitím filtrů. Mohou to být libovolné callbacky, tedy anonymní funkce či objekty s magickou metodou __invoke. Filtry přijímají v parametrech řetězec `$code` a instanci Compileru. Registrují se pomocí metody `addFilter` na objektu `$compiler`.

Pokud je pro filtr důležité, jaký soubor zrovna zpracovává, lze jej registrovat pomocí metody `$compiler->addFileFilter()` a v tom případě dostane ve třetím parametru absolutní cestu k souboru. V prvním parametru je pak obsažen pouze kód právě zpracovávaného souboru.

Minimalizovaný JavaScript pomocí filtrů a třídy [JavaScriptPacker | http://dean.edwards.name/download/#packer]
------------------------------------

/--code php
$compiler->addFilter(function ($code) {
	$packer = new JavaScriptPacker($code, "None");
	return $packer->pack();
});
\--

Chování JavaScriptPackeru je ale dost "agresivní"((nesnese vynechání středníku v JS)), takže bych pro minifikaci doporučil spíše knihovny "jsmin":https://github.com/rgrove/jsmin-php/ a "cssmin":http://code.google.com/p/cssmin/.

LessFilter
----------

Pokud chceme při psaní CSS využít preprocesoru Less, je nejdříve potřeba stáhnout knihovnu "LessPHP":https://github.com/leafo/lessphp/. Filtr LessFilter pak nechá zpracovat lessem všechny soubory s příponou less.

/--php
// filtr přidáme jednoduše
$compiler->addFileFilter(new \Webloader\Filter\LessFilter());
\--

CSS s proměnnými pomocí filtru VariablesFilter
----------------

/--code php
// proměnné filtru je možné nastavit buď přímo v konstruktoru
$filter = new WebLoader\Filter\VariablesFilter(array(
	"cervena" => "red",
	"zelena" => "green",
));

// nebo pomocí magického __set
$filter->modra = "blue";

// podobu proměnné v css souboru lze nastavit také
// $filter->setDelimiter("{", "}");
// výchozí hodnoty jsou {{$ a }}

// nastavení filtru
$compiler->addFilter($filter);
\--

CSS soubor:

/--code css
body {background: {{$cervena}}}
h1 {color: {{$modra}}}
p {color: {{$zelena}}}
\--

Výstup:
/--code css
body {background: red}
h1 {color: blue}
p {color: green}
\--

V JavaScriptu lze proměnné výhodně použít pro nastavování URL adres na různé presentery či signály.

Použití pro deployment script
=============================

Instance třídy Compiler lze zaregistrovat do aplikačního kontejneru jako služby. Tyto služby si můžeme poté vytáhnout někde v deployment scriptu a naložit s ním zhruba takto:

/--php
$context->jsloader->generate(FALSE);
$context->cssloader->generate(FALSE);
\--

/--comment

API
===

Součástí WebLoaderu jsou čtyři třídy: `CssLoader`, `JavaScriptLoader`, jejich abstraktní předek `WebLoader` a filtr `VariablesFilter`.

WebLoader
---------

**Veřejné proměnné**

|---------------------------------
| název | význam | výchozí hodnota
|---------------------------------
| sourcePath | zdrojová složka, cesta na disku | |
| sourceUri | zdrojová složka, adresa | |
| tempPath | cílová složka, cesta na disku | |
| tempUri | cílová složka, adresa | |
| joinFiles | spojovat soubory do jednoho | `true`
| generatedFileNamePrefix | prefix názvu generovaných souborů | `"generated-"`
| filters | Pole filtrů. Filtry jsou libovolné callbacky, které berou jako parametr řetězec a vracejí také řetězec. | `array()`

**Veřejné metody**

|-------------------------------
| název | význam | parametry | vrací
|-------------------------------
| getElement | *abstraktní* | `string` | `Nette\Web\Html` nebo `string`
| render | renderuje komponentu | volitelně soubory k vygenerování | |
| getFiles | získat pole soubor | | `array(string)`
| addFile | přidat soubor pokud existuje | `string` | |
| addFiles | přidat více souborů | `array(string)` | |
| removeFile | odebrat soubor | `string` | |
| removeFiles | odebrat více souborů | `array(string)` | |
| clear | odebrat všechny soubory | |
| getLastModified | datum změny nejnovějšího souboru | volitelně pole souborů, jinak zjištuje hodnotu z aktuálně přidaných souborů | `timestamp`
| getGeneratedFilename | Název vygenerovaného souboru ze souborů. Hodnota závisí na názvu a času změny souborů. | volitelně pole souborů, jinak zjištuje hodnotu z aktuálně přidaných souborů | `string`
| getContent | obsah vygenerovaného souboru | volitelně pole souborů, jinak zjištuje hodnotu z aktuálně přidaných souborů | `string`

CssLoader
---------

**Veřejné proměnné**

|---------------------------------
| název | význam | výchozí hodnota
|---------------------------------
| media | obsah atributu media tagu link | |
| absolutizeUrls | přepisovat hodnoty `url(...)` v CSS souborech na jejich absolutní formu | `true`

**Veřejné metody**

|-------------------------------
| název | význam | parametry | vrací
|-------------------------------
| getElement | generuje tag link | hodnota atributu href | `Nette\Web\Html`
| getGeneratedFilename | přepsaná metoda, přidává koncovku css | volitelně pole souborů, jinak zjištuje hodnotu z aktuálně přidaných souborů | `string`

JavaScriptLoader
----------------

**Veřejné metody**

|-------------------------------
| název | význam | parametry | vrací
|-------------------------------
| getElement | generuje tag script | hodnota atributu src | `Nette\Web\Html`
| getGeneratedFilename | přepsaná metoda, přidává koncovku js | volitelně pole souborů, jinak zjištuje hodnotu z aktuálně přidaných souborů | `string`

VariablesFilter
---------------

**Veřejné metody**

|-------------------------------
| název | význam | parametry | vrací
|-------------------------------
| *konstruktor* | volitelně přijme asociativní pole `array('promenna' => 'hodnota')` | asociativní pole | |
| setVariable | nastaví proměnnou | `string` název, `string` hodnota | |
| setDelimiter | Nastaví tvar proměnných na *první parametr + název proměnné + druhý parametr*. Výchozí hodnoty jsou `{{$` a `}}` | `string` začátek proměnné, `string` ukončení proměnné | |
| apply | provede náhradu proměnných | `string` | `string`

Historie
========

\--


{{extras}}

{{author: Honza Marek|516}}
