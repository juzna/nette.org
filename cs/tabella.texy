Tabella
*******

.[perex]
Komponenta pro vizualizaci tabulek nad databázovou vrstvou Dibi. Klíčovými vlastnostmi je konfigurovatelnost a možnost na každý pohled, stránku, či filtr jednoznačně odkazovat, neb všechny požadavky (mimo inline editaci) se provádí pouze metodou GET.

|Download | http://tabella.zatorsky.cz/tabella.zip]
|Demo | http://tabella.zatorsky.cz/
|Forum | http://forum.nette.org/cs/5364-dibigrid-novy-datagrid-pro-dibi
|Autor | Vojtech Knyttl, knyttv@gmail.com
|Licence | New BSD License


Komponenta je stále ve vývoji, proto prosím omluvte nedostatky:

- editace a filtry dle checkboxu
- editace a filtry dle data a času

Budu vděčný za jakoukoliv kritiku.

[* complex.png *]

Příklad základního použití
=========================

Pro všechny následující případe předpokládejme následující DB model:
/---code
CREATE TABLE users_test (
  id int(11) NOT NULL AUTO_INCREMENT,
  surname varchar(128),
  name varchar(128),
  sex enum('male','female') NOT NULL,
  born int(11),
  dead int(11),
  daughters int(11),
  sons int(11),
  PRIMARY KEY (id)
);
\---

/---php
	class UsersModel extends Object {
		public static function getDataSource() {
			return dibi::dataSource( "SELECT *, (daughters + sons) as children FROM users_test" );
		}

		public static function save( $set, $id ) {
			return dibi::query( "UPDATE users_test SET ", $set, "WHERE id = %i", $id );
		}
	}
\---

Komponentu potom vytvoříme továrničkou na komponenty následovně:
/---php
protected function createComponentBasicTabella( $name ) {
	$grid = new Tabella( UsersModel::getDataSource() );
	$grid->addColumn( "Id", "id", array( "width" => 30 ) );
	$grid->addColumn( "Surame", "surname", array( "width" => 100 ) );
	$grid->addColumn( "Name", "name", array( "width" => 100 ) );
	$grid->addColumn( 'Sex', 'sex', array( "width" => 50 ) );
	$grid->addColumn( "Sons", "sons", array( "width" => 65 ) );
	$grid->addColumn( "Daughters", "daughters", array( "width" => 65 ) );
	$grid->addColumn( 'Born', 'born', array( "type" => Tabella::DATETIME ) );
	$grid->addColumn( 'Dead', 'dead', array( "type" => Tabella::DATETIME ) );
	$this->addComponent( $grid, $name );
}
\---

Klíčový je v podstatě pouze příkaz addColumn pro přidání sloupce. První parametr udává zobrazované jméno, druhým je název sloupce v DB a třetí je pole parametrů. V základním zobrazení si prozatím vystačím se šířkou (udanou v pixelech) a typem. Typ může nabývat hodnot: TEXT, TEXTAREA, SELECT, CHECKBOX, DATETIME, DATE, TIME. Položky TEXTAREA, SELECT, CHECKBOX se ale týkají pouze inline editace (viz dále).

Funčkní ukázka je dostupná na http://tabella.zatorsky.cz/basic.

Příklad komplexního použití
===========================

Opět použijeme továrničku na komponenty:

/---php

protected function createComponentComplexTabella( $name ) {
	$grid = new Tabella( UsersModel::getDataSource(), array(
        	"order" => "surname",             // default order by surname
                "limit" => 15,                    // limit
                "rowRenderer" => function( $row ) {
                	return Html::el( "tr class=".$row->sex );
                }
       ));
\---


V komplexním příkladu nejprve ukazujeme, jak je v inicializaci možné docílit defaultního řazení, omezení počtu řádků na stránce a vlastní generování řádků, které podle pohlaví přiřazuje barvu. Možností je samozřejmě mnohem více.

/---php
	$grid->addColumn( 'Id', 'id', array(
               "width" => 30
        ));

        $grid->addColumn( "Surame", "surname", array(
               "dataRenderer" => function( $row ) {
               		// can be a link within the application
                     	return Html::el( "td class=al" )->add( Html::el( 'a target=_blank' )
                                    ->href( Environment::getApplication()->getPresenter()
                                            ->link( "this", array( "id" => $row->id ) ) )
                                                ->add( String::truncate( $row->surname, 25 ) ) );
                        return $td;
               },
               // own filter handler which reacts on change in the filter input
               "filterHandler" => function( $col, $val ) {
                        return "$col LIKE '$val%'";
               },
               "width" => 100
       ));
\---

Generování příjmení je zajímavé v tom, že jsme použili vlastní renderer buňky, který pro daného uživatele generuje nějaký odkaz. Také jsme použili vlastní filtr – defaultní je totiž ve formátu "$col REGEXP '.*$val.*'".

/---php
            $grid->addColumn( "Name", "name", array(
                    // own filter handler which reacts on change in the filter input
                    "filterHandler" => function( $col, $val ) {
                        return "$col LIKE '$val%'";
                    },
                    "width" => 100
            ));

            $grid->addColumn( 'Sex', 'sex', array(
                    "width" => 50,
                    // makes selectbox filter
                    "filter" => array( "" => "", "male" => "male", "female" => "female" ),
                    "filterHandler" => function( $col, $val ) {
                        return "$col = '$val'";
                    }
            ));
\---

Zde je zajímavý pouze filtr přes selectbox. Stačí přiřadit do položky filter array s výčtem a Tabella se o zbytek postará.

/---php
	$grid->addColumn( "Children", "children", array(
        	"width" => 40,
                "filter" => array(
                	"" => "",
                        0 => "having none",
                        1 => "having son",
                        2 => "having daughter",
                        3 => "having both" ),
                "filterHandler" => function( $col, $val ) {
                        switch( $val ) {
                            case 0: return "children = 0";
                            case 1: return "sons > 0";
                            case 2: return "daughters > 0";
                            case 3: return "sons > 0 AND daughters > 0";
                        }
                },
                "headerElement" => Html::el( "th colspan=2" ),
                "dataRenderer" => function( $row ) {
                	$td = Html::el( "td width=17" )->add( $row->sons ).
                                Html::el( "td width=17" )->add( $row->daughters );
                        return $td;
                }
	));
\---

Zde máme příklad, jak je možné vytvořit hlavičku s colspan=2. Data jsou řazená dle součtu dcer a synů, k čemuž jsou ještě definovány komplexnější filtry.

/---php
	$grid->addColumn( 'Born', 'born', array( "type" => Tabella::DATETIME ) );
	$grid->addColumn( 'Dead', 'dead', array(
		"type" => Tabella::DATETIME,
        	"datetimeFormat" => "%d/%m/%y"
        ));
       	$this->addComponent( $grid, $name );
}

\---

Na konec pouze naznačme, jak je možné formátovat vlastním způsobem datum.

Funčkní ukázka je dostupná na http://tabella.zatosky.cz/complex.

Inline-editovatelná Tabella
===========================

Klíčovou vlastností Tabelly je inline editace:

/---php
protected function createComponentEditableTabella( $name ) {
	$grid = new Tabella( UsersModel::getDataSource(), array(
		"limit" => 15,					// limit
		"onSubmit" => function( $post ) {
	   		UsersModel::save( $post, $post['id'] );
		}
	));

\---

Pro inline editaci je nezbytné zadat handler onSubmit, který bude zavolán pro uložení odeslaných dat. V našem případě data předáváme pouze modelu.

/---php
	$grid->addColumn( "Id", "id", array( "width" => 30 ) );

	$grid->addColumn( "Surname", "surname", array(
			"width" => 100 ));

	$grid->addColumn( "Name", "name", array(
		"width" => 100,
		"editable" => true ));

	$grid->addColumn( 'Sex', 'sex', array(
		"type" => Tabella::SELECT,
		"options" => array( 'male' => 'Male', 'female' => 'Female' ),
		"width" => 50,
		"editable" => true,
	));
\---

Pro výčet v selectboxu použijeme volbu "options".

/---php
	$grid->addColumn( "Sons", "sons", array(
		"width" => 65,
		"editable" => true
	));

	$grid->addColumn( "Daughters", "daughters", array(
		"width" => 65,
		"editable" => true
	));

	$grid->addColumn( 'Born', 'born', array(
		"type" => Tabella::DATETIME,
		"headerElement" => Html::el( "th colspan=2" ),
		"dataRenderer" => function( $row ) {
			return
				Html::el( "td data-type=date date-name=born-date" )
					->add( strftime( "%d/%m/%Y", $row->born ) ).
				Html::el( "td data-type=time date-name=born-time" )
					->add( strftime( "%H:%M", $row->born ) );
		}
	));

	$this->addComponent( $grid, $name );
}
\---

Ukázka editovatelné Tabelly je na http://tabella.zatorsky.cz/editable.

{{author: knyttl|2867}}
