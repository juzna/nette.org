####### File Downloader #######


.[perex]
Je třída na **jednodušší stahování souborů**. Podporuje **navázání přerušeného stahování** - partial content, **segmentové stahování**, **automatické zjištění mimetypu** souboru, **češtinu a mezery** v názvech souborů a obsahuje **omezovač rychlosti**.

###### K čemu je to dobré? ######

##### 1. Příklad #####

Mám na serveru složku s daty, ze které chci odeslat jeden soubor, ale při stahování souboru chci otestovat, zda má uživatel oprávnění ke stažení souboru. Použiji File downloader:
/---code php
if($acl->isAllowed("download"))
  FileDownloader::download("test.zip");
\---
A to je celé. File downloader se už sám postará o hlavičky, o bug v IE nebo o přerušené stahování.

##### 2. Příklad #####

Mám server se soubory. Uživatelé si k němu platí přístup podle rychlosti přístupu k serveru. (například: 32kb/s;64kb/s;512kb/s;1024kb/s;neomezené) Za použité File Downloaderu:
a) Nastavím rychlost v bootstrap.php:
/---code php
  FileDownloader::$maxDownloadSpeed = 64; // in kb/s
\---
a potom už volám klasicky:
/---code php
  FileDownloader::download("test.zip");
\---

b) Předám rychlost jako parametr
/---code php
  FileDownloader::download("test.zip", null, null, 64);
\---

###### Přehled funkcí ######

##### FileDownloader::download($location) #####

Tato funkce zobrazí stahovací dialog v prohlížeči. Podporuje vše výše zmíněné (částečné stahování, češtinu, omezení rychlosti a zjištění mimetypu).

Pokud server neumožní nastavení neomezeného časového limitu, knihovna se přepne do kompatibilního režimu. Tzn. použije se k vypsání souboru readfile(). Toto chování se dá potlačit pomocí `FileDownloader::$checkTimeLimit = false`. Pokud ovšem dojde k vypršení časového limitu před odesláním celého souboru, stažený soubor bude nečitelný! (tato poznámka se týká zejména serverů pod Windows, protože na nich php do času zpracovávání skriptu počítá i čekání) .[note]

/---code php
  /**
   * @param string $location      Location of source file
   * @param string $filename      File name with witch will be file sent to browser. for example: "test.jpg". UTF-8 encoded!
   * @param string $mimeType      Mimetype of the file.
   * @param int    $speedLimiter  Limits file download speed
   * @param string $terminate     Terminate script after download completes
   */
\---

##### FileDownloader::getMimeType($location) #####

Vrátí mime typ souboru.

##### FileDownloader::readFile($location) #####

Vylepšená alternativa phpkovského readfile(). Umí číst od bytu do bytu souboru, podporuje omezování rychlosti odesílání výstupu.

Silně doporučuji nastavit pokud možno neomezený časový limit pro zpracování skriptu. (tato poznámka se týká zejména serverů pod Windows, protože na nich php do času zpracovávání skriptu počítá i čekání) .[note]

/---code php
  /**
   * @param string $location      File location
   * @param int $start            Start byte
   * @param int $end              End byte
   * @param bool $speedLimit      Use buffer value as bytes per second?
   * @param int $buffer           Buffer size
   */
\---

###### Živá ukázka ######

[http://filedownloader.projekty.mujserver.net/demo/ | http://filedownloader.projekty.mujserver.net/demo/]

###### Získat File Downloader ######

##### Vývojová verze ze SVN #####

[https://svn.mujserver.net:8443/svn/Nette_FileDownloader/trunk | https://svn.mujserver.net:8443/svn/Nette_FileDownloader/trunk]

Pro přihlášení použijte uživatele "guest" a heslo nechte prázdné.

##### Stabilní verze ze SVN #####

[https://svn.mujserver.net:8443/svn/Nette_FileDownloader/tags | https://svn.mujserver.net:8443/svn/Nette_FileDownloader/tags]

Pro přihlášení použijte uživatele "guest" a heslo nechte prázdné.

##### Stabilní verze z www stránek projektu #####

[http://filedownloader.projekty.mujserver.net | http://filedownloader.projekty.mujserver.net]

{{author: Honza Kuchař|1018}}
