Header
******

Táto komponenta umožňuje dynamicky za behu definovať v šablónach potrebné CSS a JS súbory, kompilovať ich a ešte o mnoho viac. .[perex]

| Github (zdrojové kódy a download) | https://github.com/romanmatyus/Header
| Composer balíček | https://packagist.org/packages/rm/header
| Fórum | http://forum.nette.org/cs/12803-addon-header-doplnok-header
| Autor | Roman Mátyus romanmatyus@gmail.com
| Licencia | MIT
| Nette | 2.0.5+

Inštalácia
==========

1) [Stiahnuť|https://github.com/romanmatyus/Header/archive/master.zip] a rozbaliť niekam kam vidí [RobotLoader|doc:cs:Auto-loading tříd] alebo použiť *composer* balíček `"rm/header": "dev-master"`

2) Registrácia v `bootstrap.php`

/--code php
\RM\AssetsCollector\AssetsCollectorExtension::register($configurator);
\--

3) Vytvorenie komponenty `Header` obdobne ako HeaderControl:[addons:cs:HeaderControl] (Distribuovaný balíček obsahuje upravenú verziu pre jednoduchšiu spoluprácu s touto komponentou)

4) Upraviť súbor `@layout.latte` tak, aby vyzeral nasledovne:

/--code html
{capture $html}
<body>
...
</body>
</html>
{/capture}
{control header}
{!$html}
\--

Doplnok automaticky predpokladá, že základná zložka s CSS súbormi je `WWW_DIR/style/css`, s JS súbormi `WWW_DIR/style/js` a priečinok kam sa ukladajú kompilované súbory je `WWW_DIR/webtemp`. Priečinok `WWW_DIR/webtemp` musí byť prístupný z prehliadača a aplikácia musí mať právo do nich zapisovať.

Konfigurácia v `config.neon` vyzerá predvolene takto:
/--code neon
common:
	assetsCollector:
		webTemp: %wwwDir%/webtemp
		cssPath: %wwwDir%/style/css
		jsPath: %wwwDir%/style/js
\--
Cesty k priečinkom môžete jednoducho zmeniť.

Balíčky
=======

Je vhodné konfigurovať balíčky CSS a JS súborov v konfigurácií. V ideálnom prípade je každý súbor definovaný iba raz. Balíčky definujú všetky závyslosti. Je tak zabezpečené, že sa vždy načítajú všetky potrebné súbory.

**Ukážka použitia:**

Konfigurácia v `config.neon`:
/--code neon
common:
	assetsCollector:
		packages:
			jQuery:
				js:
					- %wwwDir%/style/js/jquery-1.8.2.min.js
			netteForms:
				js:
					- %wwwDir%/libs/Nette-extras/Niftyx-NiftyGrid-5163290/resources/js/netteForms.js
			jQueryUI:
				extends:
					- jQuery
				css:
					- %wwwDir%/libs/jquery-ui-1.9.1.custom/css/smoothness/jquery-ui-1.9.1.custom.min.css
				js:
					- %wwwDir%/libs/jquery-ui-1.9.1.custom/js/jquery-ui-1.9.1.custom.min.js
			NiftyGrid:
				extends:
					- jQueryUI
					- netteForms
				css:
					- %wwwDir%/libs/Nette-extras/Niftyx-NiftyGrid-5163290/resources/css/grid.css
				js:
					- %wwwDir%/libs/Nette-extras/Niftyx-NiftyGrid-5163290/resources/js/grid.js
\--

V latte šablóňe je potom možné použiť makro `{assets}` (viď. ďalej).


Nové makrá
==========

V hociktorej šablóne (pre view aj komponentu) je možné použiť makrá `{css}`, `{js}`, `{cssContent}`, `{jsContent}` a `{pack}`.

Makrá `{css}` a `{js}`
----------------------

Prijímajú zoznam súborov ktoré šablóna potrebuje. Je vhodné plniť zoznam aj so závislosťami. Každý súbor sa vráti ku klientovy maximálne raz.
Súbor sa najprv hľadá:

- v priečinku so šablónou (je vhodné najmä pri adresárovej štruktúre v ktorej každá komponenta obsahuje CSS/JS súbory vo svojej zložke
- v priečinku definovanom v $csspath/$jspath
- nehľadá, použije sa absolútna (definovaná) cesta

**Ukážka použitia**

V ľubovolnej `latte` šablóne:
/--code neon
{css "grid.css"} {* Nájde v priečinku <priečinok so šablónou>/screen.css *}
{css "screen.css"} {* Nájde v priečinku $csspath/screen.css *}
{css "/var/www/sk/web/www/style/css/screen.css"} {* Nájde v priečinku "/var/www/sk/web/www/style/css/screen.css" *}
{js "live-form-validation.js"}
{js "jquery.min.js", "jquery.nette.js", "jquery.ajaxform.js"} {* definovanie so závislosťami *}
\--

Makrá `{cssContent}` a `{jsContent}`
------------------------------------

Tieto makrá sú párové a uzatvárajú obsah. Občas sa stáva, že síce máme v načítaný JS, ale potrebujeme ho ešte inicializovať. Pre tento prípad som zvykol vytvárať extra súbor <knižnica>.init.js. To už nie je potrebné:) V priečinku nastavenom v premennej `webTemp` sa vytvorí súbor <md5 hash obsahu suboru>.css/.js a ten sa vloží do hlavičky.

**Ukážka použitia:**

Ak je potrebné v danej šablóne upraviť nejaký detail v CSS, je možné vložiť obsah, ktorý sa načíta iba pri tejto jednej šablóne:

/--code neon
{cssContent}
* { color:red}
{/cssContent}
\--

Obdobne je možné vytvoriť inicializační JS:

/--code neon
{jsContent}
$( 'textarea.editor' ).ckeditor();
{/jsContent}
\--

Makro `{pack}`
----------------

Toto makro vloží do hlavičky všetky súbory určené v konfigurácií pre daný balíček aj so závislosťami.

**Ukážka použitia:**
/--code neon
{pack "NiftyGrid"}
\--

Kompilátory
===========

Tento doplnok podporuje kompilátory. V distribučnom balíku sú registrované tieto kompilátory:

CssSimpleMinificator
--------------------

Minifikuje CSS súbory. Odstráni z nich komentáre, odstráni medzery a pod.

**Povolenie kompilátora**

Konfigurácia v `config.neon`:
/--code neon
common:
	assetsCollector:
		enabledCompilers:
			- cssSimpleMinificator
\--

ImageReplacer
-------------

Najde obrázky použité v CSS súbore, prekopíruje ich do extra zložky a nahradí odkazy v súbore platnými.

**Povolenie kompilátora**

Konfigurácia v `config.neon`:
/--code neon
common:
	assetsCollector:
		enabledCompilers:
			- imageReplacer
\--

ImageToDataStream
-----------------

Najde obrázky použité v CSS súbore a nahradí ich base64 dataStream-om.

**Povolenie kompilátora**

Konfigurácia v `config.neon`:
/--code neon
common:
	assetsCollector:
		enabledCompilers:
			- imageToDataStream
\--

Vlastný kompilátor
------------------
Kompilátor je trieda rozširujúca triedu `BaseCssAssetsCompiler` alebo `BaseJsAssetsCompiler` s použitím interface-u `IAssetsCompiler`. Podstatnou je metóda `compile()`, ktorá prijíma obsah spracúvaného súboru a vracia zmenený obsah.

Ukážeme si vytvorenie kompilátoru využívajúceho triedu [JSMin|https://github.com/rgrove/jsmin-php] pre minifikáciu javascriptov na stránke.

Využívanú triedu je pravdaže najprv nutné uložiť do priečinka z ktorého ju načíta [RobotLoader|doc:cs:Auto-loading tříd]. .[note]

/--code php
class JsMinificator extends BaseJsAssetsCompiler implements IAssetsCompiler
{
	/**
	 * @param	input string
	 * @param	dir null|string dir for find file by relative path
	 * @return	output string
	 */
	public function compile($input,$dir=null)
	{
		// nastavenie vstupu aj výstupu na zhudnú hodnotu
		$this->input = $this->output = $input;

		// spracovanie vstupu a uloženie do výstupu
		$this->output = \JSMin::minify($this->input);

		// Návrat menšej hodnoty. V prípade ak by zamýšľaný minifikátor
		// súbor zväčšil, na výstup sa vráti vstup.
		return $this->getSmaller();
	}
}
\--

Nový kompilátor zaregistrujeme ako službu v `config.neon`.
/--code neon
common:
	services:
		jsMinificator: \JsMinificator
\--

Teraz je už potrebné iba nový kompilátor prepojiť so službou `assetsCollector` a povoliť ho.
/--code neon
common:
	assetsCollector:
		addJsCompiler:
			- @jsMinificator
		enabledCompilers:
			- jsMinificator
\--

Množstvo kompilátorov nie je obmedzené. Kompilátori môžu vykonávať zložité operácie, pretože kompilátori sa spustia iba raz. Skompilované súbory sa ukladajú do priečinka nastaveného v premennej `webTemp`.

Spájanie súborov
================

Výsledné súbory sú predvolene skompilované a uložené do priečinka nastaveného v premennej `webTemp`. Je možné všetky použité CSS a JS súbory spojiť do jedného.

**Povolenie spájania**

Konfigurácia v `config.neon`:
/--code neon
common:
	assetsCollector:
		mergeFiles: true
\--

{{author: romiix.org|3532}}
