XDebugTrace Panel
*****************

Panel používá xdebug_start_trace() a xdebug_stop_trace() k vygenerování trace logu funkcí, který následně parsuje, filtruje a zobrazí v tabulce. .[perex]

|* Verze     | 0.3-beta
|* Repozitář | [https://github.com/mil0/XDebugTracePanel]
|* Autor     | (c) Miloslav Hůla (milo) 2011
|* Licence   | "LGPL":http://www.gnu.org/licenses/lgpl.html
|* Požadavky | XDebug 2.1.x, PHP 5.3+, Nette 2.0 beta
|* Diskuze   | [http://forum.nette.org/cs/9396-xdebugtrace-panel-trasovani-behu-funkci]


Ukázka
=========
Screenshot je "na githubu":https://github.com/mil0/XDebugTracePanel/blob/master/screenshot.png.


Instalace
=========
- `XDebugTrace.php` a šablony uložte někam, kam má přístup RobotLoader, například `libs/Panels/XDebugTrace/`
- V `bootstrap.php` zaregistrujte panel
/--php
// xdebug_start_trace() vždy přidává příponu .xt
$xdebugTrace = new \Panel\XDebugTrace(TMP_DIR . '/xdebug_trace_file');

// Přidání panelu
\Nette\Diagnostics\Debugger::addPanel($xdebugTrace);

// Panel je zaregistrován, ale trasování zatím neběží
\--


Spuštění trasování
==================
/--php
$xdebugTrace->start();
...
... kód který chceme sledovat
...
$xdebugTrace->pause();

// Pokračování trace logu
$xdebugTrace->start();
...
... kód který chceme sledovat
...
$xdebugTrace->stop();

// Případně lze odkudkoliv použít statickou variantu
\Panel\XDebugTrace::callStart();
\Panel\XDebugTrace::callPause();
\Panel\XDebugTrace::callStop();
\--


Filtrování záznamů trace logu
=============================
Ne všechny záznamy z trace logu chceme vidět. Log může dosahovat velikosti v megabajtech. Pro odfiltrování nežádoucích záznamů lze přidat vlastní callbacky pomocí `\Panel\XDebugTrace::addFilterCallback()`, viz. zdrojový kód. Výchozí filtr je `\Panel\XDebugTrace::defaultFilterCb()`.
/--php
// Například chceme logovat pouzuze funkci test()
$xdebugTrace->addFilterCallback(
	function($record) {
		if ($record->function !== 'test') {
			return \Panel\XDebugTrace::FILTER_SKIP;
		}
	}
);
\--

{{author: Milo|2970}}
